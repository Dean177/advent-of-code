open Core

type interval = (int * int) [@@deriving sexp]
let make start fin = 
  assert (start < fin);
  (start, fin)

let compare a b = Int.compare (fst a) (fst b)

module Parser = struct
  open Angstrom
  let integer = take_while1 (function | '0' .. '9' -> true | _ -> false) >>| Int.of_string
  let interval = make <$> integer <*> (char '-' *> integer)
  let intervals = sep_by (char '\n') interval
  let parse str = parse_string intervals str |> Result.ok_or_failwith
end

let merge_intervals ints = 
  List.sort ints ~compare:compare
  |> List.fold_left ~init:[] ~f:(fun acc (start, fin) -> 
      match acc with 
      | [] -> [(start, fin)]
      | (start_prev, finish_prev) :: rest -> (
          if (start < finish_prev && fin <= finish_prev ) then  
            (start_prev, finish_prev) :: rest
          else if (start < finish_prev && fin > finish_prev) then  
            (start_prev, fin) :: rest
          else if (start = finish_prev + 1 && fin > finish_prev) then  
            (start_prev, fin) :: rest
          else
            (start, fin) :: ((start_prev, finish_prev) :: rest))
    )
  |> List.rev

let%expect_test _ =
  Parser.parse (In_channel.read_all "./ranges.txt") 
  |> merge_intervals
  |> [%sexp_of : interval list]
  |> print_s;
  [%expect {|
    ((0 23923782) (23923784 56528831) (56528833 86026817) (86026819 113504562)
     (113504564 148746047) (148746049 193454621) (193454623 234297438)
     (234297440 270099977) (270099979 304413122) (304413124 321232216)
     (321232218 350103368) (350103370 384962937) (384962939 427084950)
     (427084952 466326203) (466326205 489214207) (489214209 534906131)
     (534906133 574462282) (574462284 597747807) (597747809 626772254)
     (626772256 678814706) (678814708 719454865) (719454867 734439880)
     (734439882 766211515) (766211517 801983712) (801983714 853629067)
     (853629069 872292650) (872292652 902374081) (902374083 953952178)
     (953952180 970661333) (970661335 1005263511) (1005263513 1047578444)
     (1047578446 1072162085) (1072162087 1112329267) (1112329269 1159703395)
     (1159703397 1197857708) (1197857710 1234159311) (1234159313 1266192644)
     (1266192646 1276470615) (1276470617 1323332739) (1323332741 1371491556)
     (1371491558 1380318984) (1380318986 1439035502) (1439035504 1465468961)
     (1465468963 1481248209) (1481248211 1518480568) (1518480570 1578664895)
     (1578664897 1583129310) (1583129312 1625174665) (1625174667 1680662689)
     (1680662691 1711620669) (1711620671 1745733187) (1745733189 1759196518)
     (1759196520 1803766701) (1803766703 1843811212) (1843811214 1869463034)
     (1869463036 1916132712) (1916132714 1942772474) (1942772476 1989219645)
     (1989219647 1995459736) (1995459738 2047086310) (2047086312 2073554867)
     (2073554869 2108426979) (2108426981 2146211143) (2146211145 2172859677)
     (2172859679 2225462596) (2225462598 2256577065) (2256577067 2287385835)
     (2287385837 2329569451) (2329569453 2353521001) (2353521003 2381045647)
     (2381045649 2412323245) (2412323247 2447228620) (2447228622 2499145061)
     (2499145063 2524105555) (2524105557 2574332443) (2574332445 2604175020)
     (2604175022 2626475102) (2626475104 2648035821) (2648035823 2682855475)
     (2682855477 2742164385) (2742164387 2760767131) (2760767133 2807055494)
     (2807055496 2842728200) (2842728202 2874958905) (2874958907 2888999956)
     (2888999958 2940456225) (2940456227 2982621959) (2982621961 2995454652)
     (2995454654 3036049062) (3036049064 3072306190) (3072306192 3098240471)
     (3098240473 3134500989) (3134500991 3178535946) (3178535948 3209140394)
     (3209140396 3248685694) (3248685696 3289305182) (3289305184 3314042171)
     (3314042173 3357139723) (3357139725 3394303381) (3394303383 3420480295)
     (3420480297 3441155353) (3441155355 3481339653) (3481339655 3531996642)
     (3531996644 3552827770) (3552827772 3587101215) (3587101217 3612936374)
     (3612936376 3661861270) (3661861272 3681451655) (3681451657 3733606952)
     (3733606954 3771488683) (3771488685 3806424827) (3806424829 3832391073)
     (3832391075 3873203604) (3873203606 3896408881) (3896408883 3930477154)
     (3930477156 3976120816) (3976120818 4014358519) (4014358521 4047227590)
     (4047227592 4086243808) (4086243810 4097750835) (4097750837 4150245197)
     (4150245199 4177987517) (4177987519 4214551645) (4214551647 4245296919)
     (4245296921 4284962279) (4284962281 4294967295)) |}]

let%expect_test _ =
  Parser.parse (In_channel.read_all "./ranges.txt") 
  |> merge_intervals
  |> List.fold ~init:(0, (-1, -1)) ~f:(fun (total, (_, prev_end)) (start, fin) -> 
      (total + (start - prev_end - 1), (start, fin))
    )
  |> [%sexp_of : (int * (int * int))]
  |> print_s;
  [%expect {|
    (125 (4284962281 4294967295)) |}]